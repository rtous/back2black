
Computer Architecture Department							Ruben Tous
Universitat Politecnica de Catalunya                       
                                                              												  
															  
													back2black Developer's Manual 

1. Building 

1.1 Prerequisites

- The opencv repo should be located within the same folder that contains this repo's root folder. OpenCV should be built statically within the opencv/build folder (see ANNEX 1)
	
	|- some_folder
		|- back2black
		|- opencv
			|- build

- Previously need to generate the GGML's SAM checkpoints file: ggml-model-f16.bin
	git clone https://github.com/YavorGIvanov/sam.cpp.git
	cd sam.cpp
	python -m venv myvenv
	.\myvenv\Scripts\activate
	mkdir checkpoints
	cd checkpoints
	wget https://dl.fbaipublicfiles.com/segment_anything/sam_vit_b_01ec64.pth
	cd ..
	pip install torch
	pip install numpy
	python convert-pth-to-ggml.py checkpoints/sam_vit_b_01ec64.pth . 1


1.2 Building

1.2.1 MacOS

.\build_macos.sh

1.2.2 Windows

.\build_windows_msvc.bat

1.2.3 Build details


NOTE: The -DBUILD_SHARED_LIBS=OFF flag makes excutable bigger but independent

From the root of the repo (better):

	cmake -DBUILD_SHARED_LIBS=OFF -B build_macos -S .
	cmake --build build_macos

From the build_macos:

	cd dev/build_macos
	cmake -DBUILD_SHARED_LIBS=OFF ..
	cmake --build .

2. Testing

2.1 MacOS

From the root of the repo:

	./build_macos/bin/editor

	./build_macos/bin/cli -t 16 -i ./img.jpg -m ./checkpoints/ggml-model-f16.bin

	./build_macos/bin/test_opencv

From the build_macos folder:

	./bin/editor

	./bin/cli -t 16 -i ../img.jpg -m ../checkpoints/ggml-model-f16.bin

	./bin/test_opencv

2.2 Windows

	.\test_opencv_msvc.bat

3. Troubleshooting

TIP: Cannot copy the OpenCV "build" folder to a different place as there are paths within the cmake related files.

TIP: Inspecting cmake variables

	include(CMakePrintHelpers)
	cmake_print_variables(${CMAKE_CURRENT_SOURCE_DIR})
	
ERROR: Compte amb errors de compilació d'OpenCV no fos cas que estiguem fent build_windows.bat en comptes de .\build_windows_msvc.bat

ERROR: fatal error: 'string.h' file not found mac
	- Remove the contents of the build folder and retry 
	
ERROR: RuntimeLibrary mismatch. Al CMakeList arrel:

	cmake_minimum_required(VERSION 3.16) 
	
	i després de project:
	
	set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

ERROR: Problem with filesystem Mac/Windows: use the OpenCV utils (e.g. cv::utils::fs::exists)

ERROR: Undefined symbols for architecture arm64:
  	   ld: symbol(s) not found for architecture arm64
	   clang: error: linker command failed with exit code 1 ...

	   Si fas un canvi a un CMake d'un modul cal tocar algun fitxer del modul per que recompili correctament.

ERROR: Duplicate symbol (entre opencv i onnxruntime)
	Al target_link_libraries cal posar_
		${ONNXRUNTIME_LINK_LIBRARIES_GLOBAL}


ANNEX 1. OpenCV

Clone OpenCV repo in an independent location

	git clone https://github.com/opencv/opencv.git

Compile OpenCV without dynamic libraries (advice: https://github.com/opencv/opencv/wiki/Compact-build-advice)

	mkdir build
	cd build
	cmake -DBUILD_SHARED_LIBS=OFF ..
	cmake --build .

When linking your app, use this:

	set(EXAMPLE_TARGET test_opencv)
	...
	set(OpenCV_DIR "/Users/rtous/dev/opencv/build")
	find_package(OpenCV REQUIRED) 
	target_link_libraries(${EXAMPLE_TARGET} PRIVATE ${OpenCV_LIBS} ${CMAKE_THREAD_LIBS_INIT})
	
For Windows compile this way:

	Need MingGW 64 bits: check ANNEX 3
	
	mkdir build
	cd build
	#cmake -G "MinGW Makefiles" -DCMAKE_CXX_COMPILER=C:/MinGW/bin/g++.exe -DCMAKE_C_COMPILER=C:/MinGW/bin/gcc.exe -DBUILD_SHARED_LIBS=OFF -DCMAKE_CXX_STANDARD=11 -DWITH_MSMF=OFF..
	cmake -G "MinGW Makefiles" -DCMAKE_CXX_COMPILER=C:/MinGW/bin/g++.exe -DCMAKE_C_COMPILER=C:/MinGW/bin/gcc.exe -DBUILD_SHARED_LIBS=OFF ..
	cmake -G "MinGW Makefiles" -DCMAKE_CXX_COMPILER=C:/MinGW/bin/g++.exe -DCMAKE_C_COMPILER=C:/MinGW/bin/gcc.exe -DBUILD_SHARED_LIBS=OFF -D BUILD_opencv_java=OFF -D BUILD_opencv_python=OFF ..
	
	(FOR MSVC: cmake -DBUILD_SHARED_LIBS=OFF -D BUILD_opencv_java=OFF -D BUILD_opencv_python=OFF ..)
	(The build type here is being ignored by MSVC: cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -D BUILD_opencv_java=OFF -D BUILD_opencv_python=OFF ..)

	cmake --build .
	
	(FOR MSVC: cmake --build . --config Release
	(FOR MSVC: cmake --build .)
	
	check: CXXFLAGS="${CFLAGS} -mno-sse4.1" emerge -av1 opencv

WARNING: Need to copy the build/opencv_ffmpegXXX.dll to the place the .exe is.

NOTA: Després de borrar el build_windows he tornat a compilar i provar i funciona (sense haver copiat la dll...). Ho he fet tenint a DockerFile una carpeta opencv (versió Debug) i una carpeta opencv_MSVC_Release que està ignorant.

ANNEX 2. ImGuiFileDialog

	https://github.com/aiekick/ImGuiFileDialog
	
	
	
ANNEX 3. Windows

3.1 WITH MingW (NO HO FAIG SERVIR, EXCEPTE PEL CMAKE CREC, FAIG SERVIR MSVC JA QUE ES REQUISIT PER OPENCV)

- Install MinGW and CMAKE
- type:

./build_windows.bat

Install MinGW 64: 
	- Download from https://winlibs.com/ (version with UCRT runtime and POSIX threads)
	- Unzip
	- Backup the C:\MinGW folder into C:\MinGW_backup_32
	- Copy the contents of mingw4 within C:\MinGW
	
SDL2 (for MINGW):
	#https://github.com/stho01/sdl2-cmake-mingw32-template
	descarregar els que tenen mingw!
	
	And add to cmake:
	
	-DCMAKE_PREFIX_PATH=C:/SDL
	
	NOTA: He comentat les línies que fan servir Threads
	
	-Cal posar a C:/SDL les carpetes bin, include, lib i share que hi ha a dins de SDL2-devel-2.30.2-mingw (no cal l'altra, image...)
	-Hi ha dues versions, CAL AGAFAR LA x86_64-w64-mingw32 QUE ES LA DE 64 bits!!
	
	- WARNING: SDL2.dll needs to be shipped at the same location of the .exe

SDL2 (for MSVC):
	Descarregar SDL2.Compiler de https://github.com/GlowCheese/SDL2-Setup/releases
	Descomprimir i moure a C:\SDL
	(nota, he copiat la carpeta SDL2 que hi havia dins include de la versió de MINGW a l'include de la versió de MSVC)

3.2 WITH MSVC

(nota: estic fent servir el cmake que venia amb MINGW...)

You need to install the latest version of Visual Studio including the "Desktop development with C++" workload (https://github.com/nodejs/node-gyp#on-windows)

Install Chocolatey (https://chocolatey.org/install):
	Open PowerShell with administrative privileges
	
	Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
	
	choco -?

Install Visual Studio tools:
	
	choco install python visualstudio2022-workload-vctools -y
	reboot

Before working:

	fnm env --use-on-cd | Out-String | Invoke-Expression

ANNEX 4. Fonts (and icons)

	- Icons are obtained from a custom font instead of images
	- First downloaded IconsFontAwesome5.h and fa-solid-900.ttf from https://github.com/juliettef/IconFontCppHeaders
	- They are in the editor folder. Can be used directly adding in the main.c (there's a specific section for fonts) and a code that appears at the end of the juliettef's github repo.
	- But to avoid paths, I have translated the ttf into a byte array in myfont.h. I did this with the binary_to_compressed_c.sh script (calls an imgui tool).
	- To setup the fonts in main.c:

	io.Fonts->AddFontDefault();
    float baseFontSize = 13.0f;
    float iconFontSize = baseFontSize * 2.0f / 3.0f; 
    static const ImWchar icons_ranges[] = { ICON_MIN_FA, ICON_MAX_16_FA, 0 };
    ImFontConfig icons_config; 
    icons_config.MergeMode = true; 
    icons_config.PixelSnapH = true; 
    icons_config.GlyphMinAdvanceX = iconFontSize; 
    //From file
    //ImFont* font = io.Fonts->AddFontFromFileTTF("/Users/rtous/dev/back2black/editor/fa-solid-900.ttf", iconFontSize, &icons_config, icons_ranges );
    //From embedded byte arrays (using the imgui binary_to_compressed tool)
    ImFont* font = io.Fonts->AddFontFromMemoryCompressedTTF(MyFont_compressed_data, MyFont_compressed_size, iconFontSize, &icons_config, icons_ranges);    
    IM_ASSERT(font != nullptr);

    More info on imgui fonts:
		https://pixtur.github.io/mkdocs-for-imgui/site/FONTS/
		https://github.com/ocornut/imgui/blob/master/docs/FONTS.md

ANNEX 5. dlib (for the facial landmarks)

- Download the dlib sources from http://dlib.net/compile.html (dowload button)
- Unzip and copy the dlib-19.24 folder (with only the dlib subfolder and the CMakeLists.txt) within third-party. 
- In the editor add:

include_directories(${dlib_INCLUDE_DIRS})
and dlib within the target_link_libraries (it regconizes the name)

ANNEX 6. onnxruntime 

A6.1 Installing onnxruntime on macOS

- too big to include sources in our repo (like opencv) 
- IMPORTANT: includes possibility to build for Apple Silicon!

- (OPTION 2) Works with the shared library too.
	- https://github.com/microsoft/onnxruntime/releases
    - But problem with Mac code sign verification. Can be skipped this way:
    	sudo spctl --master-disable
    	sudo spctl --master-enable 

- (OPTION 1) To build from source (to allows static link?)
	- CHECK:
		https://onnxruntime.ai/docs/build/ 
		https://onnxruntime.ai/docs/build/inferencing.html
	- For Apple Silicion just do:
		./build.sh --config RelWithDebInfo --build_shared_lib --parallel --compile_no_warning_as_error --skip_submodule_sync --cmake_extra_defines CMAKE_OSX_ARCHITECTURES=arm64
	- A guy statically linked it:
		https://github.com/microsoft/onnxruntime/issues/8555
	- DID IT! See CMakeLists.txt for test_onnx. 

A6.2 Installing onnxruntime on windows

	Following instructions from here: https://onnxruntime.ai/docs/build/inferencing.html

	git clone --recursive https://github.com/Microsoft/onnxruntime.git
	cd onnxruntime
	//check cmake version 3.28 or higher with cmake --version
	//.\build.bat --config RelWithDebInfo --build_shared_lib --parallel --compile_no_warning_as_error --skip_submodule_sync
	.\build.bat --config RelWithDebInfo --build_shared_lib --parallel --compile_no_warning_as_error --skip_submodule_sync --cmake_extra_defines CMAKE_CXX_COMPILER="C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\MSBuild\Current\Bin\MSBuild.exe"

	sembla que ha funcionat

ANNEX 7. SAM2

- REPO: https://github.com/ryouchinsa/sam-cpp-macos
- Requires onnxruntime
- Requires two model files. From the checkpoints dir do (it will create the folder):

	wget https://huggingface.co/rectlabel/segment-anything-onnx-models/resolve/main/sam2.1_tiny.zip
	unzip sam2.1_tiny.zip
